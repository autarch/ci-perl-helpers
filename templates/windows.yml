parameters:
  cache_key: 'cache'
  name: 'stable'
  perl: 'stable'

jobs:
  - job: Test_Windows_${{ parameters.name }}
    displayName: Windows - ${{ parameters.perl }}
    pool:
      vmImage: windows-latest
    steps:
      - bash: |
          set -e
          set -x
          # We can remove ` --ignore-checksum` once
          # https://github.com/camilohe/berrybrew.install/issues/1 is fixed.
          choco upgrade berrybrew --yes --ignore-checksum
        displayName: Install berrybrew
      - bash: |
          set -e
          set -x
          if [ -z "${{ parameters.perl }}" ] || [ "${{ parameters.perl }}" = "stable" ]; then
              latest=""
              for line in $( berrybrew available ); do
                  if [[ "$line" =~ 5.+_64$ ]]; then
                      latest="$line"
                      break
                  fi
              done
              if [ -z "$latest" ]; then
                  echo "##vso[task.logissue type=error;]Could not determine latest version of Perl provided by berrybrew"
                  echo "##vso[task.complete result=Failed;]"
                  exit 0
              fi
              echo "##vso[task.setVariable variable=perl]${latest%'_64'}"
              echo "##vso[task.setVariable variable=berrybrew_perl]${latest}"
          else
              echo "##vso[task.setVariable variable=perl]${{ parameters.perl }}"
              echo "##vso[task.setVariable variable=berrybrew_perl]${{ parameters.perl }}_64"
          fi
        displayName: Find latest Perl provided by berrybrew
      - template: check-perl-parameter.yml
        parameters:
          perl: $(perl)
      - template: install-helper-tools.yml
      - task: CacheBeta@1
        displayName: Define tools-perl cache
        inputs:
          key: '"v1" | "tools-perl" | "${{ parameters.cache_key }}" | "$(berrybrew_perl)" | "Windows"'
          path: C:\berrybrew\$(berrybrew_perl)\perl
      - bash: |
          set -e
          set -x
          # It seems like we need to re-run this even if we already have a
          # cached version. I'm guessing it does some sort of registry
          # fiddling that's necessary for the clone command that comes after
          # this to work. But this reinstall does not wipe the installed
          # modules, so the later step to install deps is still much quicker
          # when we get this perl from the cache.
          berrybrew install "$BERRYBREW_PERL"
          berrybrew exec --with "$BERRYBREW_PERL" perl -e 'use strict;use warnings;my $file = shift;open my $fh, $file or die $!;my $content = do { local $/; <$fh> };close $fh or die $!;my $q = chr(34); $content =~ s/(${q}custom_exec${q}\s*:\s*)${q}false${q}/$1${q}true${q}/;open $fh, q{>}, $file or die $!;print {$fh} $content or die $!;close $fh or die $!;' C:\\ProgramData\\chocolatey\\lib\\berrybrew\\tools\\data\\config.json
          cat C:\\ProgramData\\chocolatey\\lib\\berrybrew\\tools\\data\\config.json
        displayName: Berrybrew install tools-perl
      - task: CacheBeta@1
        displayName: Define runtime-perl base cache
        inputs:
          key: '"v1" | "base-runtime-perl" | "${{ parameters.cache_key }}" | "$(berrybrew_perl)" | "Windows"'
          path: C:\berrybrew\$(berrybrew_perl)\perl
      - bash: |
          set -e
          set -x
          berrybrew install "$BERRYBREW_PERL"
        displayName: Berrybrew install runtime-perl
      - task: CacheBeta@1
        displayName: Define runtime-perl clone cache
        inputs:
          key: '"v1" | "runtime-perl-clone" | "${{ parameters.cache_key }}" | "$(perl)" | "Windows"'
          path: C:\berrybrew\runtime-perl\perl
      - bash: |
          set -e
          set -x
          berrybrew clone "$BERRYBREW_PERL" runtime-perl
        displayName: Berrybrew clone installed Perl as runtime-perl
      - bash: |
          set -e
          set -x
          mkdir "$CI_WORKSPACE_DIRECTORY\\bin" && \
          curl -fsSL --compressed https://git.io/cpm > "$CI_WORKSPACE_DIRECTORY/bin/cpm" && \
          chmod 0755 "$CI_WORKSPACE_DIRECTORY\\bin\\cpm"
        displayName: Install cpm
      - bash: |
          set -e
          set -x
          berrybrew exec --with "$BERRYBREW_PERL" \
          perl "$CI_WORKSPACE_DIRECTORY\\bin\\cpm" install \
          --global \
          --show-build-log-on-failure \
          --verbose \
          --feature tools-perl \
          --cpanfile "$CI_WORKSPACE_DIRECTORY\\ci-perl-helpers-tools\\cpanfile"
        displayName: Install tools prereqs
      - bash: |
          set -e
          set -x
          mkdir -p "$CI_ARTIFACT_STAGING_DIRECTORY"
        displayName: Make artifacts directory
      - task: DownloadPipelineArtifact@2
        displayName: Download distro tarball pipeline artifact
        inputs:
          artifactName: dist-tarball
          targetPath: '$(Build.ArtifactStagingDirectory)'
      - bash: |
          set -e
          set -x
          "$CI_WORKSPACE_DIRECTORY\\ci-perl-helpers-tools\\bin\\with-perl" "$BERRYBREW_PERL" show-env.pl
        displayName: Show environment
      - bash: |
          set -e
          set -x
          "$CI_WORKSPACE_DIRECTORY\\ci-perl-helpers-tools\\bin\\with-perl" "$BERRYBREW_PERL" pre-test.pl --runtime-perl $(perl)
        displayName: Pre test
      - bash: |
          set -e
          set -x
          "$CI_WORKSPACE_DIRECTORY\\ci-perl-helpers-tools\\bin\\with-perl" "$BERRYBREW_PERL" build-cpanfile.pl
        displayName: Create cpanfile for test & runtime dependencies
      - bash: |
          set -e
          set -x
          "$CI_WORKSPACE_DIRECTORY\\ci-perl-helpers-tools\\bin\\with-perl" "$BERRYBREW_PERL" install-prereqs.pl
        displayName: Install test & runtime dependencies
      - bash: |
          set -e
          set -x
          "$CI_WORKSPACE_DIRECTORY\\ci-perl-helpers-tools\\bin\\with-perl" "$BERRYBREW_PERL" prep-for-tests.pl
        displayName: Prep distro for tests (make or ./Build)
      - bash: |
          set -e
          set -x
          "$CI_WORKSPACE_DIRECTORY\\ci-perl-helpers-tools\\bin\\with-perl" "$BERRYBREW_PERL" install-dynamic-prereqs.pl
        displayName: Install dynamic dependencies added by running Makefile.PL or  Build.PL
      - bash: |
          set -e
          set -x
          "$CI_WORKSPACE_DIRECTORY\\ci-perl-helpers-tools\\bin\\with-perl" "$BERRYBREW_PERL" run-tests.pl
        displayName: Run tests
      - task: PublishTestResults@2
        displayName: Publish test results
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: $(CI_WORKSPACE_DIRECTORY)\\junit\\**\\*.xml
          mergeTestResults: true
          testRunTitle: Windows - $(perl)
